CCS PCH C Compiler, Version 4.108, 18251               30-may-11 20:50

               Filename: C:\Users\owner\Elias Respaldo\Interfaces\final\Codigo C\Envio\adclcd.lst

               ROM used: 838 bytes (3%)
                         Largest free fragment is 29880
               RAM used: 8 (0%) at main() level
                         21 (1%) worst case
               Stack:    6 worst case (5 in main + 1 for interrupts)

*
0800:  GOTO   0A7C
.................... #include "adclcd.h" 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=8 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES WDT128                	//Watch Dog Timer uses 1:128 Postscale 
.................... #FUSES HS                    	//High speed Osc (> 4mhz for PCM/PCH) (>10mhz for PCD) 
.................... #FUSES NOPROTECT             	//Code not protected from reading 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES BORV20                	//Brownout reset at 2.0V 
.................... #FUSES NOPUT                 	//No Power Up Timer 
.................... #FUSES NOCPD                 	//No EE protection 
.................... #FUSES STVREN                	//Stack full/underflow will cause reset 
.................... #FUSES NODEBUG               	//No Debug mode for ICD 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES NOWRT                 	//Program memory not write protected 
.................... #FUSES NOWRTD                	//Data EEPROM not write protected 
.................... #FUSES IESO                  	//Internal External Switch Over mode enabled 
.................... #FUSES FCMEN                 	//Fail-safe clock monitor enabled 
.................... #FUSES PBADEN                	//PORTB pins are configured as analog input channels on RESET 
.................... #FUSES NOWRTC                	//configuration not registers write protected 
.................... #FUSES NOWRTB                	//Boot block not write protected 
.................... #FUSES NOEBTR                	//Memory not protected from table reads 
.................... #FUSES NOEBTRB               	//Boot block not protected from table reads 
.................... #FUSES NOCPB                 	//No Boot Block code protection 
.................... #FUSES MCLR                  	//Master Clear pin enabled 
.................... #FUSES LPT1OSC               	//Timer1 configured for low-power operation 
.................... #FUSES NOXINST               	//Extended set extension and Indexed Addressing mode disabled (Legacy mode) 
.................... #FUSES PLL12                 	//Divide By 12(48MHz oscillator input) 
.................... #FUSES CPUDIV4               	//System Clock by 4 
.................... #FUSES USBDIV                	//USB clock source comes from PLL divide by 2 
.................... #FUSES VREGEN                	//USB voltage regulator enabled 
.................... #FUSES ICPRT                 	//ICPRT enabled 
....................  
.................... #use delay(crystal=20000000,  clock=5000000) 
*
081C:  CLRF   FEA
081E:  MOVLW  0E
0820:  MOVWF  FE9
0822:  MOVF   FEF,W
0824:  BZ    0840
0826:  MOVLW  01
0828:  MOVWF  01
082A:  CLRF   00
082C:  DECFSZ 00,F
082E:  BRA    082C
0830:  DECFSZ 01,F
0832:  BRA    082A
0834:  MOVLW  9E
0836:  MOVWF  00
0838:  DECFSZ 00,F
083A:  BRA    0838
083C:  DECFSZ FEF,F
083E:  BRA    0826
0840:  RETLW  00
....................  
....................  
.................... #include "LCD416.c" 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD416.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN rs;           // on to an I/O port to gain 
....................            BOOLEAN enable;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  RS will 
....................            int     data : 4;         // be pin D0. 
....................         } lcd; 
.................... //#define use_lcd_rw true 
....................  
....................  
.................... #byte lcd = 0x0f83                        // This puts the entire structure 
....................                                      // on to port B (at address 6) 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6};  
....................                      //{0x20 | (lcd_type << 2), 0x0f, 1, 6};//0f blinking cursor 
....................                             //{0x20 | (lcd_type << 2), 0xc, 1, 6}; //original 
....................                      // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... #ifdef use_lcd_rw 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
.................... #endif 
....................  
.................... BYTE lcdline; 
....................  
.................... #ifdef use_lcd_rw 
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_cycles(1); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(1); 
....................       lcd.enable = 1; 
....................       delay_us(1); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
.................... #endif 
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0842:  SWAPF  14,W
0844:  ANDLW  F0
0846:  MOVWF  00
0848:  MOVLW  0F
084A:  ANDWF  F83,W
084C:  IORWF  00,W
084E:  MOVWF  F83
....................       delay_cycles(1); 
0850:  NOP   
....................       lcd.enable = 1; 
0852:  BSF    F83.1
....................       delay_us(2); 
0854:  BRA    0856
....................       lcd.enable = 0; 
0856:  BCF    F83.1
.................... } 
0858:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
085A:  BCF    F83.0
....................       #ifdef use_lcd_rw 
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
....................       #else 
....................       delay_us(60); 
085C:  MOVLW  18
085E:  MOVWF  00
0860:  DECFSZ 00,F
0862:  BRA    0860
0864:  BRA    0866
....................       #endif 
....................       lcd.rs = address; 
0866:  BTFSS  11.0
0868:  BCF    F83.0
086A:  BTFSC  11.0
086C:  BSF    F83.0
....................       delay_cycles(1); 
086E:  NOP   
....................       #ifdef use_lcd_rw 
....................       lcd.rw = 0; 
....................       delay_cycles(1); 
....................       #endif 
....................       lcd.enable = 0; 
0870:  BCF    F83.1
....................       lcd_send_nibble(n >> 4); 
0872:  SWAPF  12,W
0874:  MOVWF  13
0876:  MOVLW  0F
0878:  ANDWF  13,F
087A:  MOVFF  13,14
087E:  RCALL  0842
....................       lcd_send_nibble(n & 0xf); 
0880:  MOVF   12,W
0882:  ANDLW  0F
0884:  MOVWF  13
0886:  MOVWF  14
0888:  RCALL  0842
.................... } 
088A:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_d(LCD_WRITE); 
088C:  MOVLW  00
088E:  MOVWF  F95
....................     lcd.rs = 0; 
0890:  BCF    F83.0
....................    #ifdef use_lcd_rw 
....................     lcd.rw = 0; 
....................    #endif 
....................     lcd.enable = 0; 
0892:  BCF    F83.1
....................     delay_ms(15); 
0894:  MOVLW  0F
0896:  MOVWF  0E
0898:  RCALL  081C
....................     for(i=1;i<=3;++i) { 
089A:  MOVLW  01
089C:  MOVWF  07
089E:  MOVF   07,W
08A0:  SUBLW  03
08A2:  BNC   08B4
....................        lcd_send_nibble(3); 
08A4:  MOVLW  03
08A6:  MOVWF  14
08A8:  RCALL  0842
....................        delay_ms(5); 
08AA:  MOVLW  05
08AC:  MOVWF  0E
08AE:  RCALL  081C
....................     } 
08B0:  INCF   07,F
08B2:  BRA    089E
....................     lcd_send_nibble(2); 
08B4:  MOVLW  02
08B6:  MOVWF  14
08B8:  RCALL  0842
....................     for(i=0;i<=3;++i) 
08BA:  CLRF   07
08BC:  MOVF   07,W
08BE:  SUBLW  03
08C0:  BNC   08DA
....................    { 
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
08C2:  CLRF   03
08C4:  MOVF   07,W
08C6:  RCALL  0808
08C8:  MOVWF  08
08CA:  CLRF   11
08CC:  MOVWF  12
08CE:  RCALL  085A
....................    #ifndef use_lcd_rw 
....................    delay_ms(5); 
08D0:  MOVLW  05
08D2:  MOVWF  0E
08D4:  RCALL  081C
....................    #endif 
....................    } 
08D6:  INCF   07,F
08D8:  BRA    08BC
....................  
.................... } 
08DA:  GOTO   0AA4 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
08DE:  MOVLW  01
08E0:  SUBWF  0F,W
08E2:  ADDLW  FC
08E4:  BC    0904
08E6:  ADDLW  04
08E8:  GOTO   0914
....................      case 1 : address=0x80;break; 
08EC:  MOVLW  80
08EE:  MOVWF  10
08F0:  BRA    0904
....................      case 2 : address=0xc0;break; 
08F2:  MOVLW  C0
08F4:  MOVWF  10
08F6:  BRA    0904
....................      case 3 : address=0x90;break; 
08F8:  MOVLW  90
08FA:  MOVWF  10
08FC:  BRA    0904
....................      case 4 : address=0xd0;break; 
08FE:  MOVLW  D0
0900:  MOVWF  10
0902:  BRA    0904
....................    } 
....................    address+=x-1; 
0904:  MOVLW  01
0906:  SUBWF  0E,W
0908:  ADDWF  10,F
....................    lcd_send_byte(0,address); 
090A:  CLRF   11
090C:  MOVFF  10,12
0910:  RCALL  085A
.................... } 
0912:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0968:  MOVF   0D,W
096A:  XORLW  0C
096C:  BZ    0978
096E:  XORLW  06
0970:  BZ    098C
0972:  XORLW  02
0974:  BZ    099A
0976:  BRA    09A4
....................      case '\f'   : lcd_send_byte(0,1); 
0978:  CLRF   11
097A:  MOVLW  01
097C:  MOVWF  12
097E:  RCALL  085A
....................                    lcdline=1; 
0980:  MOVLW  01
0982:  MOVWF  04
....................                    delay_ms(2); 
0984:  MOVLW  02
0986:  MOVWF  0E
0988:  RCALL  081C
....................                                            break; 
098A:  BRA    09B0
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
098C:  INCF   04,F
098E:  MOVLW  01
0990:  MOVWF  0E
0992:  MOVFF  04,0F
0996:  RCALL  08DE
0998:  BRA    09B0
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
099A:  CLRF   11
099C:  MOVLW  10
099E:  MOVWF  12
09A0:  RCALL  085A
09A2:  BRA    09B0
....................      default     : lcd_send_byte(1,c);     break; 
09A4:  MOVLW  01
09A6:  MOVWF  11
09A8:  MOVFF  0D,12
09AC:  RCALL  085A
09AE:  BRA    09B0
....................    } 
.................... } 
09B0:  RETLW  00
....................  
.................... #ifdef use_lcd_rw 
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
.................... #endif 
....................  
.................... #define LCD_ENABLE_PIN PIN_D1 
.................... #define LCD_RS_PIN PIN_D0 
....................  
.................... #fuses xt,nomclr,noprotect,nolvp 
.................... #use rs232(uart1,baud=9600,xmit=PIN_C6,bits=8,parity=N) 
*
0936:  BTFSS  F9E.4
0938:  BRA    0936
093A:  MOVWF  FAD
093C:  GOTO   0B14 (RETURN)
.................... #use standard_io(d) 
....................  
....................  
.................... #use fast_io(b)                      
.................... #use fast_io(a) 
....................  
.................... #build(reset=0x800) 
.................... #build(interrupt=0x808) 
.................... #org 0x0000, 0x07ff void bootloader() {} 
*
0000:  RETLW  00
....................  
.................... int boton, x ; 
.................... void main() 
.................... { 
*
0A7C:  CLRF   FF8
0A7E:  BCF    FD0.7
0A80:  CLRF   FEA
0A82:  CLRF   FE9
0A84:  BSF    FB8.3
0A86:  MOVLW  81
0A88:  MOVWF  FAF
0A8A:  MOVLW  00
0A8C:  MOVWF  FB0
0A8E:  MOVLW  A6
0A90:  MOVWF  FAC
0A92:  MOVLW  90
0A94:  MOVWF  FAB
0A96:  MOVF   FC1,W
0A98:  ANDLW  C0
0A9A:  IORLW  0F
0A9C:  MOVWF  FC1
0A9E:  MOVLW  07
0AA0:  MOVWF  FB4
....................    lcd_init(); 
0AA2:  BRA    088C
....................   set_uart_speed(9600); 
0AA4:  BSF    FB8.3
0AA6:  MOVLW  81
0AA8:  MOVWF  FAF
0AAA:  MOVLW  00
0AAC:  MOVWF  FB0
0AAE:  MOVLW  A6
0AB0:  MOVWF  FAC
....................    setup_spi(SPI_SS_DISABLED); 
0AB2:  BCF    FC6.5
0AB4:  BCF    F94.7
0AB6:  MOVLW  01
0AB8:  MOVWF  FC6
0ABA:  MOVLW  00
0ABC:  MOVWF  FC7
....................    setup_wdt(WDT_OFF); 
0ABE:  BCF    FD1.0
....................    setup_timer_0(RTCC_INTERNAL); 
0AC0:  MOVLW  80
0AC2:  MOVWF  FD5
....................    setup_timer_1(T1_DISABLED); 
0AC4:  CLRF   FCD
....................    setup_timer_2(T2_DISABLED,0,1); 
0AC6:  MOVLW  00
0AC8:  MOVWF  FCA
0ACA:  MOVLW  00
0ACC:  MOVWF  FCB
....................    setup_ccp1(CCP_OFF); 
0ACE:  BSF    F94.2
0AD0:  CLRF   FBD
0AD2:  CLRF   FB7
0AD4:  CLRF   FB6
....................    setup_comparator(NC_NC_NC_NC); 
0AD6:  MOVLW  07
0AD8:  MOVWF  FB4
0ADA:  MOVF   F92,W
0ADC:  MOVWF  F92
0ADE:  MOVLW  03
0AE0:  MOVWF  00
0AE2:  DECFSZ 00,F
0AE4:  BRA    0AE2
0AE6:  BRA    0AE8
0AE8:  MOVF   FB4,W
0AEA:  BCF    FA1.6
....................    lcd_gotoxy(1,1) ; 
0AEC:  MOVLW  01
0AEE:  MOVWF  0E
0AF0:  MOVWF  0F
0AF2:  RCALL  08DE
....................    delay_ms(1000); 
0AF4:  MOVLW  04
0AF6:  MOVWF  07
0AF8:  MOVLW  FA
0AFA:  MOVWF  0E
0AFC:  RCALL  081C
0AFE:  DECFSZ 07,F
0B00:  BRA    0AF8
....................    x = 1; 
0B02:  MOVLW  01
0B04:  MOVWF  06
....................    while(true) 
....................    {      
....................     
....................    boton = input( PIN_B5 ); 
0B06:  CLRF   05
0B08:  BTFSC  F81.5
0B0A:  INCF   05,F
....................       
....................      if (boton==0){ 
0B0C:  MOVF   05,F
0B0E:  BNZ   0B44
....................              putc(x);  
0B10:  MOVF   06,W
0B12:  BRA    0936
....................              printf(LCD_PUTC,"%d",x);     
0B14:  MOVFF  06,07
0B18:  MOVLW  1F
0B1A:  MOVWF  08
0B1C:  BRA    09B2
....................         delay_ms(1000); 
0B1E:  MOVLW  04
0B20:  MOVWF  07
0B22:  MOVLW  FA
0B24:  MOVWF  0E
0B26:  RCALL  081C
0B28:  DECFSZ 07,F
0B2A:  BRA    0B22
....................          lcd_gotoxy(1,1) ; 
0B2C:  MOVLW  01
0B2E:  MOVWF  0E
0B30:  MOVWF  0F
0B32:  RCALL  08DE
....................    x++; 
0B34:  INCF   06,F
....................    delay_ms(2000); 
0B36:  MOVLW  08
0B38:  MOVWF  07
0B3A:  MOVLW  FA
0B3C:  MOVWF  0E
0B3E:  RCALL  081C
0B40:  DECFSZ 07,F
0B42:  BRA    0B3A
....................     
....................      } 
....................              
....................    } 
0B44:  BRA    0B06
.................... } 
....................  
....................  
0B46:  SLEEP 

Configuration Fuses:
   Word  1: C03C   XT IESO FCMEN PLL5 CPUDIV4 USBDIV
   Word  2: 0E39   NOBROWNOUT WDT128 NOWDT BORV20 NOPUT VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 00A1   STVREN NODEBUG NOLVP NOXINST ICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
