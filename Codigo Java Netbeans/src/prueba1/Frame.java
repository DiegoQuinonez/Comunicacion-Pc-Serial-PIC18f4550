/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Frame.java
 *
 * Created on 21-abr-2011, 1:20:39
 */

package prueba1;
import jPicUsb.*;
import java.util.logging.Level;
import java.util.logging.Logger;
/**
 *
 * @author Vastard
 */
public class Frame extends javax.swing.JFrame {
public byte cmd_LED = 88;
    /** Creates new form Frame */
    public Frame() {
        initComponents();
        try {
            iface.load();//inicializamos la libreria Jpicusb
        } catch (Exception ex) {
            Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
       //configuramos el vid_pid del dispositivo asi podemos usar las funciones "rapidas" de la interfaz
       // iface.set_vidpid("vid_04d8&pid_000b");
        //configuramos la instancia del dispositivo asi podemos usar las funciones "rapidas" de la interfaz
       // iface.set_instance(0);
        //efecto
    }
    public void send_command(byte comando, byte parametro) {
        byte[] salida = {comando, parametro};
        iface.QWrite(salida, 2, 1000);/*
        QWrite (byte[ ] pData, int dwLen, long dwMilliseconds)
            Escribe dwLen bytes del arreglo pData,
     con un timeout de dwMilliseconds milisegundos y luego cierra la conexión.
         Retorna la cantidad de bytes que se escribieron con éxito

         */
    }
private void encender_led() {
        byte Estado = 0x00;
        if (led.isSelected()) {
            Estado |= 0x01;
        }
            send_command(cmd_LED, Estado);
    //System.out.println(getBitString((int) LED));
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        led = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        led.setText("Prender LED");
        led.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ledActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(led)
                .addContainerGap(191, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(109, 109, 109)
                .addComponent(led)
                .addContainerGap(168, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ledActionPerformed
       encender_led();
    }//GEN-LAST:event_ledActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox led;
    // End of variables declaration//GEN-END:variables

}
